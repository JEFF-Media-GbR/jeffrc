#!/bin/bash

function print_usage() {
   echo "Usage: rc [OPTIONS]... HOST TASK [ARGUMENTS]...
   
Options"
echo "  -d;enable debug mode
  -v;enable verbose mode
  -t;enable pseudo-tty for ssh
  -l;log output when using script task
  -h;print this help message" | column -t -s ";"

echo "
Tasks"
echo "  sh;execute shell command
  script;uploads a script and executes it remotely
  put;upload a file
  update;shows available apt updates
  upgrade;installs available apt upgrades
  install;installs apt packages" | column -t -s ";"
}

function echo_bold() {
  echo -ne "\e[1m"
  echo -ne "$@"
  echo -ne "\e[0m"
}

function echo_dim() {
  echo -ne "\e[2m"
  echo -ne "$@"
  echo -ne "\e[0m"
}

function debug() {
  if [[ "$debug" -eq 1 ]];
    then echo_dim "$@\n"
  fi
}

function create_config() {
  if [[ ! -d ~/.jeffrc ]]; then
    mkdir ~/.jeffrc
    config_changed=1
  fi
  if [[ ! -f ~/.jeffrc/hosts ]]; then
    cat << EOF > ~/.jeffrc/hosts
# When you use "all" instead of a hostname, the following hosts will be used.
# Hostnames are seperated by spaces
all_hosts="localhost"
EOF
  config_changed=1
  fi
  
  if [[ "$config_changed" -eq 1 ]]; then
    echo "Your config at ~/.jeffrc/ was incomplete and has been regenerated. Please adjust the settings to your needs and rerun the command."
    exit 0
  fi
}

function enable_tty() {
  interactive="-t"
  interactive_label="(tty)"
}

create_config
source ~/.jeffrc/hosts

while getopts ":dtvlh" OPTION; do
  case $OPTION in
  d)
    debug=1
    ;;
  v)
    verbose="-v"
    ;;
  t)
    enable_tty
    ;;
  h)
    print_usage
    exit 0
    ;;
  l)
    log=1
    mkdir -p /var/log/jeffrc || { echo "E: could not create /var/log/jeffrc"; exit 1; }
    ;;
  \?)
    echo "error: invalid option: '-$OPTARG'" 
    exit 1
    ;;
  esac
done
shift $((OPTIND-1))

hosts="$1"
shift

if [[ "$hosts" == "all" ]]; then
  hosts="$all_hosts"
fi

task="$1"
shift

if [[ "$task" == "put" ]]; then
  shift
  source="$1"
  dest="$2"
  shift 2
  if [[ -z "$source" ]]; then
    echo "E: no source file given"
    exit 1
  elif [[ -z "$dest" ]]; then
    echo "E: no destination file path given"
    exit 1
  fi
  for host in $hosts; do
    if [[ "$host" == "localhost" ]]; then
      continue
    fi
    echo "$source -> $host:$dest" | column -s " " -t
    scp "$source" "$host":"$dest" > /dev/null || echo "error: transfer failed."

  done
  exit 0
  
elif [[ "$task" == "script" ]]; then
  script_dir="~/.jeffrc/scripts.d"
  cd $script_dir || { echo "E: ~/.jeffrc/scripts.d not found"; exit 1; }
  script="$1"
  shift
  if [[ -z "$script" ]]; then
    echo "E: no script name given"
    exit 1
  elif [[ ! -f "$script" ]]; then
    echo "E: script \"$script\" not found"
    exit 1
  fi
  
  for host in $hosts; do

    echo_bold [ "$host" ]
    echo_dim " $interactive_label\n"
    
    if [[ "$host" == "localhost" ]]; then
      tmpdir=$(mktemp -d)
      if [[ -z "$tmpdir" ]] || [[ "$tmpdir" == "/" ]]; then 
        echo "E: could not create remote tempdir"
        exit 1
      fi
      script_basename=$(basename $script)
      scp "$script" "$tmpdir/$script_basename" > /dev/null || { echo "E: transfer failed."; continue; }
      echo_dim "Working directory: $tmpdir\n"
      bash -c "cd $tmpdir && bash $script_basename; cd /tmp && rm -rf $tmpdir" | tee /var/log/jeffrc/$script_basename.$host.log
      echo
    else
      tmpdir_remote=$(ssh $host mktemp -d)
      if [[ -z "$tmpdir_remote" ]] || [[ "$tmpdir_remote" == "/" ]]; then 
        echo "E: could not create remote tempdir"
        exit 1
      fi
      script_basename=$(basename $script)
      scp "$script" "$host":"$tmpdir_remote/$script_basename" > /dev/null || { echo "E: transfer failed."; continue; }
      echo_dim "Remote working directory: $tmpdir_remote\n"
      ssh $host "cd $tmpdir_remote || { echo 'E: could not cd into working directory.'; exit 1; }; bash $script_basename; cd /tmp && rm -rf $tmpdir_remote;" | tee /var/log/jeffrc/$script_basename.$host.log
      echo
    fi
  done
  exit 0

	
elif [[ "$task" == "update" ]]; then
  cmd='apt-get update >/dev/null; output=$(LANG=C apt-get --just-print upgrade 2>&1 | perl -ne '\''if (/Inst\s([\w,\-,\d,\.,~,:,\+]+)\s\[([\w,\-,\d,\.,~,:,\+]+)\]\s\(([\w,\-,\d,\.,~,:,\+]+)\)? /i) {print "$1: $2 -\> $3\n"}'\''); if [[ -z "$output" ]]; then echo "All packages on $HOSTNAME are up to date"; else echo "Following packages on $HOSTNAME are outdated:"; echo "$output" | column -s " " -t; fi'
	
elif [[ "$task" == "upgrade" ]]; then
  cmd="apt-get upgrade"
  enable_tty

elif [[ "$task" == "install" ]]; then
  cmd="apt-get install $*"
  enable_tty

elif [[ "$task" == "sh" ]]; then
  cmd="$*"

else
  echo "error: unknown task '$task'."
  exit 1
fi

for host in $hosts; do
  echo_bold [ "$host" ]
  echo_dim " $interactive_label\n"
  if [[ "$host" == "localhost" ]]; then
    debug eval \""$cmd"\"
    eval "$cmd"
  else
    [[ ! -z "$host$cmd" ]] && debug "ssh arguments: $verbose $interactive"
    debug executing: "$cmd"
    ssh $verbose $interactive "$host" "$cmd"
  fi
  echo
done
